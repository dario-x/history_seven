runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
library(RColorBrewer)
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
?lapply()
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
runApp('C:/Users/user/1) Jupyter/Text visuals/Application.R')
library(shiny); runApp('C:/Users/user/Desktop/CS2/Application.R')
runApp('C:/Users/user/Desktop/CS2/Application.R')
library(shiny); runApp('C:/Users/user/AppData/Local/Temp/Temp1_Case Study 4 Dario Bogenreiter.zip/Case Study 4 Dario Bogenreiter.R')
shiny::runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
hr
?hr
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
runApp('C:/Users/user/1) Jupyter/Text visuals')
library(rsconnect)
library(shiny)
#for plotting graph
library(visNetwork)
#for generating docterm matrix
library(superml)
library(lsa)
#for getting connected components
library(igraph)
#for data manipulation
library(dplyr)
#for making interactive charts
library(plotly)
#for changing color style
library(RColorBrewer)
#for manipulating strings
library(stringr)
#for error checking
library(berryFunctions)
#host the app
rsconnect::setAccountInfo(name='dario-x',
token='E91476910F77978413E91AA174437709',
secret='pnJ+BnN6SSWLn4rjLL8DW4e/L79TJANaMptMiOZ1')
rsconnect::deployApp('C:/Users/user/1) Jupyter/Text visuals')
library(keras)
library(EBImage)
library(tidyverse)
use_condaenv("r-tensorflow")
# MNIST data
mnist <- dataset_mnist()
c(c(trainx, trainy), c(testx, testy)) %<-% mnist
install_tensorflow()
# MNIST data
install_tensorflow()
install.packages("tensorflow")
install.packages("tensorflow")
library(keras)
library(EBImage)
library(tidyverse)
use_condaenv("r-tensorflow")
# MNIST data
install_tensorflow()
mnist <- dataset_mnist()
install.packages("tensorflow")
install.packages("tensorflow")
shiny::runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp()
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp()
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp()
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp()
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp()
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp()
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
?sliderInput()
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Create an empty list to store the randomized groups
randomizedGroups <- list()
# Randomly assign participants to groups within blocks
for (i in 1:numBlocks) {
block <- sample(participants, numGroups)
randomizedGroups[[i]] <- block
participants <- setdiff(participants, block)
}
# Assign block names as "VR" and "2D"
blockNames <- c("VR", "2D")
names(randomizedGroups) <- blockNames
# Print the randomized groups with block names
for (i in 1:numBlocks) {
cat("Block", blockNames[i], ":", randomizedGroups[[blockNames[i]]], "\n")
}
View(randomizedGroups)
View(stocks)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Create an empty list to store the randomized groups
randomizedGroups <- list()
# Randomly assign participants to groups within blocks
for (i in 1:numBlocks) {
block <- sample(participants, numGroups)
randomizedGroups[[i]] <- block
participants <- setdiff(participants, block)
}
# Assign block names as "VR" and "2D"
blockNames <- c("VR", "2D")
names(randomizedGroups) <- blockNames
# Print the randomized groups with block names
for (i in 1:numBlocks) {
cat("Block", blockNames[i], ":", randomizedGroups[[blockNames[i]]], "\n")
}
View(randomizedGroups)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Create an empty dataframe to store the randomized assignments
assignment <- data.frame(patient_name = character(length(participants)),
group_name = character(length(participants)))
# Randomly assign participants to groups within blocks
for (i in 1:numBlocks) {
block <- sample(participants, numGroups)
assignment[((i - 1) * numGroups + 1):(i * numGroups), "patient_name"] <- block
assignment[((i - 1) * numGroups + 1):(i * numGroups), "group_name"] <- rep(c("VR", "2D"), each = numGroups)
participants <- setdiff(participants, block)
}
# Print the assignment dataframe
print(assignment)
View(assignment)
# Define the list of participants
participants <- list(paste0("patient", 1:12))
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Create an empty dataframe to store the randomized assignments
assignment <- data.frame(patient_name = character(length(participants)),
group_name = character(length(participants)))
# Randomly assign participants to groups within blocks
for (i in 1:numBlocks) {
block <- sample(participants, numGroups)
assignment[((i - 1) * numGroups + 1):(i * numGroups), "patient_name"] <- block
assignment[((i - 1) * numGroups + 1):(i * numGroups), "group_name"] <- rep(c("VR", "2D"), each = numGroups)
participants <- setdiff(participants, block)
}
# Print the assignment dataframe
print(assignment)
View(participants)
View(assignment)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment <- rep(c("VR", "2D"), each = numBlocks)
assignment <- sample(assignment)
# Create the data frame with assignments
df <- data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
View(df)
# Define the list of participants
participants <- list(paste0("patient", 1:12))
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment <- rep(c("VR", "2D"), each = numBlocks)
assignment <- sample(assignment)
# Create the data frame with assignments
df <- data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment <- rep(c("VR", "2D"), each = numBlocks)
set.seed(007)
assignment <- sample(assignment)
# Create the data frame with assignments
df <- data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment <- rep(c("VR", "2D"), each = numBlocks)
set.seed(007)
assignment <- sample(assignment)
# Create the data frame with assignments
df <- data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment <- rep(c("VR", "2D"), each = numBlocks)
set.seed(007)
assignment <- sample(assignment)
# Create the data frame with assignments
df <- data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment <- rep(c("VR", "2D"), each = numBlocks)
set.seed(007)
assignment <- sample(assignment)
# Create the data frame with assignments
df <- data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants <- paste0("patient", 1:12)
# Set the number of groups and blocks
numGroups <- 2
numBlocks <- length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment <- rep(c("VR", "2D"), each = numBlocks)
set.seed(007)
assignment <- sample(assignment)
# Create the data frame with assignments
df <- data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants = paste0("patient_", 1:12)
# Set the number of groups and blocks
numGroups = 2
numBlocks = length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment = rep(c("VR", "2D"), each = numBlocks)
# Set the Seed to make the results reproducible
set.seed(007)
# Assign the participants
assignment = sample(assignment)
# Create the data frame with assignments
df = data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants = paste0("participant_", 1:12)
# Set the number of groups and blocks
numGroups = 2
numBlocks = length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment = rep(c("VR", "2D"), each = numBlocks)
# Set the Seed to make the results reproducible
set.seed(007)
# Assign the participants
assignment = sample(assignment)
# Create the data frame with assignments
df = data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants = paste0("participant_", 1:12)
# Set the number of groups and blocks
numGroups = 2
numBlocks = length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment = rep(c("VR", "2D"), each = numBlocks)
# Set the Seed to make the results reproducible
set.seed(007)
# Assign the participants
assignment = sample(assignment)
# Create the data frame with assignments
df = data.frame(patient_name = participants, starts_first_with = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants = paste0("participant_", 1:12)
# Set the number of groups and blocks
numGroups = 2
numBlocks = length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment = rep(c("VR", "2D"), each = numBlocks)
# Set the Seed to make the results reproducible
set.seed(69)
# Assign the participants
assignment = sample(assignment)
# Create the data frame with assignments
df = data.frame(patient_name = participants, starts_first_with = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants = paste0("participant_", 1:12)
# Set the number of groups and blocks
numGroups = 2
numBlocks = length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment = rep(c("VR", "2D"), each = numBlocks)
# Set the Seed to make the results reproducible
set.seed(77)
# Assign the participants
assignment = sample(assignment)
# Create the data frame with assignments
df = data.frame(patient_name = participants, starts_first_with = assignment)
# Print the assignment data frame
print(df)
# Define the list of participants
participants = paste0("participant_", 1:12)
# Set the number of groups and blocks
numGroups = 2
numBlocks = length(participants) / numGroups
# Randomly assign participants to groups within blocks
assignment = rep(c("VR_first", "2D_first"), each = numBlocks)
# Set the Seed to make the results reproducible
set.seed(77)
# Assign the participants
assignment = sample(assignment)
# Create the data frame with assignments
df = data.frame(patient_name = participants, group_name = assignment)
# Print the assignment data frame
print(df)
shiny::runApp('C:/Users/user/PycharmProjects/history_seven/2D_app')
library(rsconnect)
library(shiny)
library(DT)
library(lazyeval)
library(leaflet)
library(leaflet.providers)
library(raster)
library(shinythemes)
library(sp)
library(terra)
# set the working directory to directory of the script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
#host the app
rsconnect::setAccountInfo(name='dario-x',
token='B2851460A9710DA623BF1C1F19C34424',
secret='irGcCeP2PN3ckEKl3IwXZSifo9L4rCej2nA8SHJ9')
rsconnect::deployApp('C:/Users/user/PycharmProjects/history_seven/2D_app/', appTitle = 'History7')
Y
