# Load packages
library('sf')
library('stringr')
filter_mask
# longitude latitude altitude accuracy;
v <- structure(list(field = "parcel_a", shape = filter_mask), class = "data.frame", row.names = c(NA, -1L))
# Function to take the string, split it up, and turn it into a polygon
mkshp <- function(x) {
x <- str_trim(x)
y <- unlist(strsplit(x, split=' '))
# Reshape it to a matrix
m <- matrix(as.numeric(y), ncol=4, byrow=TRUE)
# Just want the first two columns - long, lat
m <- m[, 1:2]
# Need to reorder the matrix because the coords are not in order
# This bit will need to be rewritten to accomodate your real data
m <- m[c(1, 2, 4, 3), ]
# Need to close it by adding the first row to the end
m <- rbind(m, m[1, ])
# Create a polygon object
st_polygon(list(m))
}
# shps will be a list of polygons (one for each row in the data frame)
shps <- lapply(strsplit(v$shape, split=';'), mkshp)
# Set these polygons as the geometry column in our data frame
st_geometry(v) <- st_as_sfc(shps)
# Set a Coordinate Reference System if you wnat
# st_crs(v) <- ...
plot(v, axes=T)
typeof(filter_mask)
filter_mask = unlist(filter_mask)
filter_mask = gsub("\\,", "", gsub("SHAPE", "",gsub("POLYGON", "",gsub("\\(", "", gsub(")", "", filter_mask)))))
filter_mask
filter_mask$SHAPE
# Load packages
library('sf')
library('stringr')
#filter_mask = unlist(filter_mask)
#filter_mask = gsub("\\,", "", gsub("SHAPE", "",gsub("POLYGON", "",gsub("\\(", "", gsub(")", "", filter_mask)))))
filter_mask
# longitude latitude altitude accuracy;
v <- structure(list(field = "parcel_a", shape = "5 50 0 0.5; 20 50 0 0.5; 5 40 0 0.5; 20 40 0 0.5"), class = "data.frame", row.names = c(NA, -1L))
# Function to take the string, split it up, and turn it into a polygon
mkshp <- function(x) {
x <- str_trim(x)
y <- unlist(strsplit(x, split=' '))
# Reshape it to a matrix
m <- matrix(as.numeric(y), ncol=2, byrow=TRUE)
# Just want the first two columns - long, lat
m <- m[, 1:2]
# Need to reorder the matrix because the coords are not in order
# This bit will need to be rewritten to accomodate your real data
m <- m[c(1, 2, 4, 3), ]
# Need to close it by adding the first row to the end
m <- rbind(m, m[1, ])
# Create a polygon object
st_polygon(list(m))
}
# shps will be a list of polygons (one for each row in the data frame)
shps <- lapply(strsplit(v$shape, split=';'), mkshp)
# Set these polygons as the geometry column in our data frame
st_geometry(v) <- st_as_sfc(shps)
# Set a Coordinate Reference System if you wnat
# st_crs(v) <- ...
plot(v, axes=T)
# Load packages
library('sf')
library('stringr')
#filter_mask = unlist(filter_mask)
#filter_mask = gsub("\\,", "", gsub("SHAPE", "",gsub("POLYGON", "",gsub("\\(", "", gsub(")", "", filter_mask)))))
filter_mask
# longitude latitude altitude accuracy;
v <- structure(list(field = "parcel_a", shape = filter_mask), class = "data.frame", row.names = c(NA, -1L))
# Function to take the string, split it up, and turn it into a polygon
mkshp <- function(x) {
x <- str_trim(x)
y <- unlist(strsplit(x, split=' '))
# Reshape it to a matrix
m <- matrix(as.numeric(y), ncol=2, byrow=TRUE)
# Just want the first two columns - long, lat
m <- m[, 1:2]
# Need to reorder the matrix because the coords are not in order
# This bit will need to be rewritten to accomodate your real data
m <- m[c(1, 2, 4, 3), ]
# Need to close it by adding the first row to the end
m <- rbind(m, m[1, ])
# Create a polygon object
st_polygon(list(m))
}
# shps will be a list of polygons (one for each row in the data frame)
shps <- lapply(strsplit(v$shape, split=';'), mkshp)
# Set these polygons as the geometry column in our data frame
st_geometry(v) <- st_as_sfc(shps)
# Set a Coordinate Reference System if you wnat
# st_crs(v) <- ...
plot(v, axes=T)
# Load packages
library('sf')
library('stringr')
#filter_mask = unlist(filter_mask)
#filter_mask = gsub("\\,", "", gsub("SHAPE", "",gsub("POLYGON", "",gsub("\\(", "", gsub(")", "", filter_mask)))))
filter_mask
# longitude latitude altitude accuracy;
v <- structure(list(field = "parcel_a", shape = filter_mask), class = "data.frame", row.names = c(NA, -1L))
# Function to take the string, split it up, and turn it into a polygon
mkshp <- function(x) {
x <- str_trim(x)
# Reshape it to a matrix
m <- matrix(as.numeric(y), ncol=2, byrow=TRUE)
# Just want the first two columns - long, lat
m <- m[, 1:2]
# Need to reorder the matrix because the coords are not in order
# This bit will need to be rewritten to accomodate your real data
m <- m[c(1, 2, 4, 3), ]
# Need to close it by adding the first row to the end
m <- rbind(m, m[1, ])
# Create a polygon object
st_polygon(list(m))
}
# shps will be a list of polygons (one for each row in the data frame)
shps <- lapply(strsplit(v$shape, split=';'), mkshp)
# Set these polygons as the geometry column in our data frame
st_geometry(v) <- st_as_sfc(shps)
# Set a Coordinate Reference System if you wnat
# st_crs(v) <- ...
plot(v, axes=T)
filter_mask  = str_trim(filter_mask)
filter_mask
filter_mask
x1=c()
x2=c()
i=0
for (n in strsplit(filter_mask, " ")){
if(i == 1){append(x1, i)
i = 0}else{
append(x2, i)
i = 1}
}
} x1
x1=c()
x2=c()
i=0
for (n in strsplit(filter_mask, " ")){
if(i == 1){append(x1, i)
i = 0}else{
append(x2, i)
i = 1}
}
x1
x1=c()
x2=c()
i=0
for (n in strsplit(filter_mask, " ")){
if(i == 1){append(x1, i)
print("hey")
i = 0}else{
append(x2, i)
i = 1}
}
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")){
if(i == 1){append(x1, i)
print("hey")
i = 0}else{
append(x2, i)
i = 1}
}
strsplit(filter_mask, " ")
i=1
for (n in strsplit(filter_mask, " ")[1]){
if(i == 1){append(x1, i)
print("hey")
i = 0}else{
append(x2, i)
i = 1}
}
strsplit(filter_mask, " ")
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){append(x1, i)
print("hey")
i = 0}else{
append(x2, i)
i = 1}
}
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){append(x1, i)
i = 0}else{
append(x2, i)
i = 1}
}
x1
x2
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){append(x1, i)
print("hey")
i = 0}else{
append(x2, i)
i = 1}
}
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){append(x1, i)
print(i)
i = 0}else{
append(x2, i)
i = 1}
}
strsplit(filter_mask, " ")[[1]]
filter_list = strsplit(filter_mask, " ")[[1]]
filter_list = list(strsplit(filter_mask, " ")[[1]])
View(filter_list)
filter_list = strsplit(filter_mask, " ",  fixed=T)
filter_list
View(filter_list)
filter_list = str.split(filter_mask, " ",  fixed=T)
filter_list = split(filter_mask, " ",  fixed=T)
filter_list = split(filter_mask, " ")
View(filter_list)
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){append(x1, i)
print(i)
i = 0}else{
append(x2, i)
i = 1}
}
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){append(x1, i)
print(n)
i = 0}else{
append(x2, i)
i = 1}
}
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){append(x1, n)
i = 0}else{
append(x2, n)
i = 1}
}
x1
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){
x1=append(x1, n)
i = 0
}else{
append(x2, n)
i = 1
}
}
x1
x2
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){
x1=append(x1, n)
i = 0
}else{
x2=append(x2, n)
i = 1
}
}
p = Polygon(cbind(x1, x2))
xym <- cbind(x1, x2)
p = Polygon())
xym <- cbind(x1, x2)
p = Polygon(xym)
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){
x1=append(x1, as.double(n))
i = 0
}else{
x2=append(x2, as.double(n))
i = 1
}
}
xym <- cbind(x1, x2)
p = Polygon(xym)
ps = Polygons(list(p),1)
sps = SpatialPolygons(list(ps))
plot(sps)
#create spatialpolygon
p = Polygon(cbind(x1, x2))
ps = Polygons(list(p),1)
sps = SpatialPolygons(list(ps))
plot(sps)
sps
runApp()
filter_mask = vienna_boundaries %>% filter(BEZNR == 7) %>% select(SHAPE) %>% unlist()
filter_mask  = str_trim(filter_mask)
filter_list = split(filter_mask, " ")
#extract longitude and latitude
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){
x1=append(x1, as.double(n))
i = 0
}else{
x2=append(x2, as.double(n))
i = 1
}
}
#create spatialpolygon
p = Polygon(cbind(x1, x2))
ps = Polygons(list(p),1)
filter_mask = SpatialPolygons(list(ps))
plot(filter_mask)
plot(filter_mask)
runApp()
vienna_boundaries = read.csv("./data/BEZIRKSGRENZEOGD.csv")
filter_mask = vienna_boundaries %>% filter(BEZNR == 7) %>% select(SHAPE) %>% unlist()
filter_mask  = str_trim(filter_mask)
filter_mask  = str_trim(filter_mask)
filter_list = split(filter_mask, " ")
#extract longitude and latitude
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){
x1=append(x1, as.double(n))
i = 0
}else{
x2=append(x2, as.double(n))
i = 1
}
}
#create spatialpolygon
p = Polygon(cbind(x1, x2))
ps = Polygons(list(p),1)
filter_mask = SpatialPolygons(list(ps))
plot(filter_mask)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
addPolygons
?addPolygons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/user/Desktop/historyVR')
runApp('C:/Users/user/Desktop/historyVR')
runApp()
runApp('C:/Users/user/Desktop/historyVR/app.r')
shiny::runApp()
runApp()
runApp()
library(rsconnect)
library(shiny)
library(DT)
library(lazyeval)
library(leaflet)
library(leaflet.providers)
library(raster)
library(shinythemes)
library(sp)
library(terra)
#host the app
rsconnect::setAccountInfo(name='dario-x',
token='E4CB8DE11E8D3719FB14F4B3D099BCCB',
secret='Y+3CEYZALvA+6FAmq1rdPEH4pKTvEdyPg2gojsR2')
rsconnect::deployApp('C:/Users/user/Desktop/History/')
runApp()
runApp()
library(rsconnect)
library(shiny)
library(DT)
library(lazyeval)
library(leaflet)
library(leaflet.providers)
library(raster)
library(shinythemes)
library(sp)
library(terra)
#host the app
rsconnect::setAccountInfo(name='dario-x',
token='E4CB8DE11E8D3719FB14F4B3D099BCCB',
secret='Y+3CEYZALvA+6FAmq1rdPEH4pKTvEdyPg2gojsR2')
rsconnect::deployApp('C:/Users/user/Desktop/History/')
runApp()
runApp()
library(rsconnect)
library(shiny)
library(DT)
library(lazyeval)
library(leaflet)
library(leaflet.providers)
library(raster)
library(shinythemes)
library(sp)
library(terra)
#host the app
rsconnect::setAccountInfo(name='dario-x',
token='E4CB8DE11E8D3719FB14F4B3D099BCCB',
secret='Y+3CEYZALvA+6FAmq1rdPEH4pKTvEdyPg2gojsR2')
rsconnect::deployApp('C:/Users/user/Desktop/History/')
library(shiny); runApp('app2.R')
runApp('app2.R')
library(rsconnect)
library(shiny)
library(DT)
library(lazyeval)
library(leaflet)
library(leaflet.providers)
library(raster)
library(shinythemes)
library(sp)
library(terra)
#host the app
rsconnect::setAccountInfo(name='dario-x',
token='E4CB8DE11E8D3719FB14F4B3D099BCCB',
secret='Y+3CEYZALvA+6FAmq1rdPEH4pKTvEdyPg2gojsR2')
rsconnect::deployApp('C:/Users/user/Desktop/History/')
# Load packages
library('sf')
library('stringr')
#filter_mask = unlist(filter_mask)
filter_mask = gsub("\\,", "", gsub("SHAPE", "",gsub("POLYGON", "",gsub("\\(", "", gsub(")", "", filter_mask)))))
filter_mask  = str_trim(filter_mask)
filter_list = split(filter_mask, " ")
#extract longitude and latitude
x1=c()
x2=c()
i=1
for (n in strsplit(filter_mask, " ")[[1]]){
if(i == 1){
x1=append(x1, as.double(n))
i = 0
}else{
x2=append(x2, as.double(n))
i = 1
}
}
#create spatialpolygon
p = Polygon(cbind(x1, x2))
ps = Polygons(list(p),1)
filter_mask = SpatialPolygons(list(ps))
plot(filter_mask)
shiny::runApp()
runApp()
runApp()
